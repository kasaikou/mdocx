on:
  pull_request:
    paths-ignore:
      - '**.md'
      - '/.**'
  # push:
  #   paths: [.github/workflows/pull-request-for-default.yaml, Makefile]
env:
  NODE_VERSION: '18.13.0'
  PYTHON_VERSION: '3.10.10'
  POETRY_VERSION: '1.3.2'

jobs:
  lint-check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: yarn

  test-build:
    strategy:
      fail-fast: false
      matrix:
        platform: [linux, win32, darwin]
        arch: [x64]
        include:
          - platform: linux
            os: ubuntu-20.04
            shell: bash
          - platform: win32
            os: windows-2019
            shell: msys2 {0}
          - platform: darwin
            os: macos-11
            shell: bash
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell}}
    steps:
      - uses: msys2/setup-msys2@v2
        if: ${{ contains(matrix.os, 'windows') }}
        with:
          update: true
          install: >-
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-python3.10
            mingw-w64-x86_64-python-poetry
            mingw-w64-x86_64-python-setuptools
            mingw-w64-x86_64-yarn
            mingw-w64-x86_64-nodejs
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-poetry-yarn-venv-cache-python[${{ env.PYTHON_VERSION }}]-poetry[${{ env.POETRY_VERSION }}]-yarn(${{ hashFiles('yarn.lock') }})-venv(${{ hashFiles('poetry.lock') }})
          restore-keys: |
            ${{ runner.os }}-python-poetry-yarn-venv-cache-
      - uses: actions/setup-node@v3
        if: ${{ !contains(matrix.os, 'windows') }}
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: actions/setup-python@v4
        if: ${{ !contains(matrix.os, 'windows') }}
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: python-pip/setup-poetry
        if: ${{ !contains(matrix.os, 'windows') }}
        run: |
          pip install poetry==${{ env.POETRY_VERSION }}
      - name: bash/check-version
        run: |
          yarn --version
          poetry --version
      - name: make/test
        run: |
          make test ARCH=${{ matrix.arch }} PLATFORM=${{ matrix.platform }} --debug=v
      - name: failure/check-directory
        if: failure() && contains(matrix.os, 'macos')
        run: |
          ls -al .
          ls -al ./out
          ls -al ./out/mdocx-${{ matrix.platform }}-${{ matrix.arch }}
          ls -al ./out/mdocx-${{ matrix.platform }}-${{ matrix.arch }}/mdocx.app
          ls -al ./out/mdocx-${{ matrix.platform }}-${{ matrix.arch }}/mdocx.app/Contents
          ls -al ./out/mdocx-${{ matrix.platform }}-${{ matrix.arch }}/mdocx.app/Contents/MacOS
      - name: make/package
        run: |
          make package ARCH=${{ matrix.arch }} PLATFORM=${{ matrix.platform }} --debug=v
      - name: bash/output-specification
        id: app
        shell: bash
        run: |
          echo "version=`npm pkg get version | sed 's/"//g'`" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v2
        with:
          path: out/make/zip/${{ matrix.platform }}/${{ matrix.arch }}/mdocx-${{ matrix.platform }}-${{ matrix.arch }}-${{ steps.app.outputs.version }}.zip
    outputs:
      version: ${{ steps.app.outputs.version }}
